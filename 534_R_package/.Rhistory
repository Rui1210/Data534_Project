geom_violin(draw_quantiles = 0.5)
violin_plot
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
library(dplyr)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
View(numeric_boom_genres)
View(numeric_boom_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
#numeric_boom_genres <- select(numeric_boom_genres, -id)
View(numeric_boom_genres)
library(rjson)
library(tidyverse)
library(forcats)
library(dplyr)
movies <- fromJSON(file = 'lab2-movies.json') %>%
as_tibble() %>%
unnest(-c(studios, genres))
boom_genres <- movies %>%
unnest(genres)
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
numeric_boom_genres <- select_if(boom_genres, is.numeric)
#numeric_boom_genres <- select(numeric_boom_genres, -id)
View(numeric_boom_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
View(numeric_boom_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
is.numeric(boom_genres[genres])
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
is.numeric([boom_genres[genres]])
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
is.numeric(boom_genres[genres])
View(boom_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
is.numeric(boom_genres["genres"])
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
select_if(boom_genres, is.numeric)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
View(numeric_boom_genres)
View(median_revenue)
rm(list = ls())
library(rjson)
library(tidyverse)
library(forcats)
library(dplyr)
movies <- fromJSON(file = 'lab2-movies.json') %>%
as_tibble() %>%
unnest(-c(studios, genres))
boom_genres <- movies %>%
unnest(genres)
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
#pivot_longer()
View(numeric_boom_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
pivot_longer(!c(genres, median_revenue))
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
pivot_longer(numeric_boom_genres,!c(genres, median_revenue),names_to = "median_revenue")
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
View(numeric_boom_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_boom_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
View(numeric_boom_genres)
library(rjson)
library(tidyverse)
library(forcats)
library(dplyr)
movies <- fromJSON(file = 'lab2-movies.json') %>%
as_tibble() %>%
unnest(-c(studios, genres))
boom_genres <- movies %>%
unnest(genres)
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
#numeric_boom_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
View(numeric_boom_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
View(numeric_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = name, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5).facet_wrap(~.value)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5).facet_wrap(~.name)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5).facet_wrap(~.name, scales = "free")
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) + facet_wrap(~.name, scales = "free")
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) + facet_wrap(~name, scales = "free")
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) + facet_wrap(~name)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) + facet_wrap(~name, scales = "free")
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~name, scales = "free")
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~name, scales = "free", ncol = 2)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue))
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~name, scales = "free", ncol = 2, as.table = TRUE)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~name, scales = "free", ncol = 2, as.table = TRUE)
View(numeric_genres)
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5, scale = "count") +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)  + theme_minimal() +
theme(
plot.width = 8,
plot.height = 6
)
violin_plot
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)  + theme_minimal() +
theme(
plot.width = 8,
plot.height = 6
)
violin_plot
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue)) +
geom_violin(draw_quantiles = 0.5)
violin_plot
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(rjson)
library(tidyverse)
library(forcats)
library(dplyr)
movies <- fromJSON(file = 'lab2-movies.json') %>%
as_tibble() %>%
unnest(-c(studios, genres))
boom_genres <- movies %>%
unnest(genres)
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5, scale = "count") +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5, scale = "count") +
facet_wrap(~numeric_variables, scales = "free", ncol = 3, as.table = TRUE)
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5, scale = "count") +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
theme_minimal() +
theme(
plot.width = 8,  # 设置宽度
plot.height = 6  # 设置高度
)
violin_plot
boom_genres = boom_genres %>% group_by(genres) %>% mutate(median_revenue = median(revenue))
violin_plot = ggplot(boom_genres) +
aes(x = revenue, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5)
violin_plot
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
violin_plots = ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
violin_plots
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
violin_plots = ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
violin_plots.show()
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
violin_plots = ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
violin_plots
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
violin_plots = ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue)) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
violin_plots
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
violin_plots = ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue)) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 3, as.table = TRUE)
violin_plots
numeric_boom_genres <- select_if(boom_genres, is.numeric)
numeric_boom_genres <- select(numeric_boom_genres, -id)
numeric_genres <- pivot_longer(numeric_boom_genres,!c(genres, median_revenue), names_to = "numeric_variables")
violin_plots = ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5) +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
violin_plots
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5, scale = "count") +
facet_wrap(~numeric_variables, scales = "free",as.table = TRUE)
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue)) +
geom_violin(draw_quantiles = 0.5, scale = "count") +
facet_wrap(~numeric_variables, scales = "free",as.table = TRUE)
ggplot(numeric_genres) +
aes(x = value, y = reorder(genres, median_revenue),fill = genres) +
geom_violin(draw_quantiles = 0.5, scale = "count") +
facet_wrap(~numeric_variables, scales = "free", ncol = 2, as.table = TRUE)
View(movies)
# 安装和加载所需的包
install.packages(c("sf", "ggplot2"))
library(sf)
# 安装和加载所需的包
install.packages(c("sf", "ggplot2"))
library(sf)
library(sf)
library(ggplot2)
# 从内置的sf数据集获取英国地图
uk <- st_read(system.file("shape", "uk", package = "sf"))
# 从内置的sf数据集获取英国地图
uk <- st_read(system.file("shape", "uk", package = "sf"))
install.packages(c("sf", "rnaturalearth"))
library(sf)
library(rnaturalearth)
install.packages(c("sf", "rnaturalearth"))
library(sf)
library(rnaturalearth)
# 获取英国地图数据
uk_map <- ne_countries(country = "United Kingdom", returnclass = "sf")
# 绘制英国地图
ggplot() +
geom_sf(data = uk_map) +
theme_minimal()
library(ggplot2)
ggplot() +
geom_sf(data = uk_map) +
theme_minimal()
library(sf)
library(rnaturalearth)
library(ggplot2)
# 获取英国地图数据
uk_map <- ne_countries(country = "United Kingdom", returnclass = "sf")
# 创建一个示例数据框，包含地区代码和颜色变量
region_data <- data.frame(
region_code = uk_map$region,
color_variable = sample(1:10, nrow(uk_map), replace = TRUE)
)
uk_map <- ne_countries(country = "United Kingdom", returnclass = "sf")
colnames(uk_map)
uk_map$iso_a3
uk_map <- ne_countries(country = "United Kingdom", returnclass = "sf")
colnames(uk_map)
uk_map$iso_a3
# 创建一个示例数据框，包含地区代码和颜色变量
region_data <- data.frame(
region_code = uk_map$iso_a3,
color_variable = sample(1:10, nrow(uk_map), replace = TRUE)
)
# 将示例数据与地图数据合并
uk_map_data <- merge(uk_map, region_data, by.x = "region", by.y = "region_code")
# 将示例数据与地图数据合并
uk_map_data <- merge(uk_map, region_data, by.x = "iso_a3", by.y = "region_code")
# 绘制英国地图，根据颜色变量上色
ggplot() +
geom_sf(data = uk_map_data, aes(fill = color_variable)) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +  # 颜色渐变
theme_minimal()
# 获取英国地图数据
uk_map <- ne_countries(country = "United Kingdom", returnclass = "sf")
# 查看地图数据的列名
colnames(uk_map)
# 创建一个示例数据框，包含地区代码和颜色变量
region_data <- data.frame(
nuts = uk_map$nuts,  # 替换为地图数据中的正确地区代码列
color_variable = sample(1:10, nrow(uk_map), replace = TRUE)
)
colnames(uk_map)
uk_map$iso_a3_eh
library(sf)
library(rnaturalearth)
library(ggplot2)
# 获取英国地图数据
uk_map <- ne_countries(country = "United Kingdom", returnclass = "sf")
# 创建一个示例数据框，包含地区代码和颜色变量
region_data <- data.frame(
Region_ID = c(1:17),  # 你提供的地区代码
color_variable = sample(1:10, 17, replace = TRUE)
)
# 将示例数据与地图数据合并
uk_map_data <- merge(uk_map, region_data, by.x = "iso_a3", by.y = "Region_ID")
# 绘制英国地图，根据颜色变量上色
ggplot() +
geom_sf(data = uk_map_data, aes(fill = color_variable)) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_minimal()
# 定义起始时间和结束时间
start_date <- as.Date("2022-01-01")
end_date <- as.Date("2022-01-10")
# 生成日期序列
date_sequence <- seq(start_date, end_date, by = "1 day")
# 显示生成的日期序列
print(date_sequence)
start_date <- as.Date("2022-02-15")
end_date <- as.Date("2022-03-10")
# 生成日期序列
date_sequence <- seq(start_date, end_date, by = "1 day")
# 显示生成的日期序列
print(date_sequence)
# 定义起始时间和结束时间
start_date <- as.Date("2020-02-15")
end_date <- as.Date("2020-03-10")
# 生成日期序列
date_sequence <- seq(start_date, end_date, by = "1 day")
# 显示生成的日期序列
print(date_sequence)
knitr::opts_chunk$set(echo = TRUE)
iimg <- function(file, folder = "img/data550/", myurl = "https://irene.vrbik.ok.ubc.ca/"){
knitr::include_graphics(paste(myurl, folder, file, sep=""))
}
linkto <- function(file, folder = "img/data550/", myurl = "https://irene.vrbik.ok.ubc.ca/"){
return(paste(myurl, folder, file, sep=""))
}
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
iimg <- function(file, folder = "img/data550/", myurl = "https://irene.vrbik.ok.ubc.ca/"){
knitr::include_graphics(paste(myurl, folder, file, sep=""))
}
linkto <- function(file, folder = "img/data550/", myurl = "https://irene.vrbik.ok.ubc.ca/"){
return(paste(myurl, folder, file, sep=""))
}
cat(paste0("**Irene's Notes:** This is based off of:
- [Joel's video lec2-1](https://ubcca-my.sharepoint.com/personal/joel_ostblom_ubc_ca/_layouts/15/onedrive.aspx?ga=1&id=%2Fpersonal%2Fjoel%5Fostblom%5Fubc%5Fca%2FDocuments%2Fmds%2F2020%2D21%2F531%20%2D%20Data%20visualization%201%2Flec2%2Dvisual%2Denconding%2Dand%2Dplot%2Dconfig%2F531%2Dlec2%2D1%2Dvisual%2Dencodings%2Emp4&parent=%2Fpersonal%2Fjoel%5Fostblom%5Fubc%5Fca%2FDocuments%2Fmds%2F2020%2D21%2F531%20%2D%20Data%20visualization%201%2Flec2%2Dvisual%2Denconding%2Dand%2Dplot%2Dconfig)"))
library(tidyverse)
library(tidyverse)
#| echo: false
path = "/Users/ivrbik/Library/CloudStorage/OneDrive-UBC/github/Data-550/data/"
stocks = read.csv(paste(path, "stocks.csv", sep=""))
rm(list = ls())
source("~/Downloads/DATA 534/DATA 534 group project/project.R", echo=TRUE)
carbon_generation_visual("2018-5-11", "2018-5-30","abc")
%load "carbon_generation.R"
source("carbon_generation.R")
source("carbon_generation.R")
getwd()
source("carbon_generation.R")
source("C:\Users\Yahan\Downloads\DATA 534\DATA 534 group project\carbon_generation.R")
source("C:/Users/Yahan/Downloads/DATA 534/DATA 534 group project/carbon_generation.R")
# test for carbon_generation.R
library(testthat)
getwd()
source("~/Downloads/DATA 534/DATA 534 group project/test_generation.R", echo=TRUE)
source("~/Downloads/DATA 534/DATA 534 group project/test_generation.R", echo=TRUE)
source("~/Downloads/DATA 534/DATA 534 group project/test_generation.R", echo=TRUE)
source("~/Downloads/DATA 534/DATA 534 group project/test_generation.R", echo=TRUE)
install.packages("usethis")
install.packages("devtools")
install.packages("roxygen2")
library(usethis)
library(devtools)
library(roxygen2)
has_devel()
dir.create("C:\Users\Yahan\Downloads\DATA 534\DATA 534 group project\534_R_package")
#dir.create("C:\Users\Yahan\Downloads\DATA 534\DATA 534 group project\534_R_package")
dir.create("C:/Users/Yahan/Downloads/DATA 534/DATA 534 group project/534_R_package")
setwd("C:/Users/Yahan/Downloads/DATA 534/DATA 534 group project/534_R_package")
usethis::create_package("carbonVisR")
usethis::create_package("carbonVisR", open = F)
